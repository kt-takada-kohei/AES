# AES-128

import numpy as np      # 多次元配列などを扱うライブラリ
import sympy            # 代数演算ライブラリ

mojiretsu = input('入力 : ')
nagasa = len(mojiretsu)

list_1 = []
for i in range(nagasa):                   # 1文字ずつlist_1に入れていく
    list_1.append(mojiretsu[i])

for i in range(nagasa):                   # ASCIIコード(10進数)に変換
    list_1[i] = ord(list_1[i])

for i in range(nagasa):                   # 2進数に変換(0bを付けない形式)
    list_1[i] = format(list_1[i], 'b')

# 2進数に変換した後、
# 8桁に満たない場合は先頭に0を付けて8桁に揃える
for i in range(len(list_1)):
    if (len(list_1[i]) != 8):
        for j in range(8-len(list_1[i])):
            list_1[i] = '0' + list_1[i]

binmoji = ''.join(list_1)          # join関数でlist_1の各要素を文字列として結合

nagasa_2 = len(binmoji)            # 2進数化した文字列の長さ

################################################
# サブ鍵生成アルゴリズム

# keyを128bitずつ入れるための配列を作る
p, q = divmod(nagasa_2, 128)
p_deny = p + 1

if (q == 0):                     # 128個ずつ入れるための配列の要素数を場合分け
    bunkatsu_128 = [0] * p
elif (q != 0):
    bunkatsu_128 = [0] * (p+1)

num_youso_128 = len(bunkatsu_128)    # bunkatsu_128の要素数

#print(bunkatsu_128)

for i in range(num_youso_128):
    bunkatsu_128[i] = np.random.randint(0, 2, 128)

# bunkatsu_128がkey全体
# bunkatsu_128 = [[01が128個], [01が128個], ... ]
# これをベースにしてサブ鍵を生成する

# 1つひとつのkeyを4分割して32bitにする
for i in range(len(bunkatsu_128)):
    bunkatsu_128[i] = np.array_split(bunkatsu_128[i], 4)

# i, jなどはテキスト通りの割り振り

w0 = bunkatsu_128[0][0]
w1 = bunkatsu_128[0][1]
w2 = bunkatsu_128[0][2]
w3 = bunkatsu_128[0][3]

# サブ鍵であるk0～k10を格納しておくための配列（要素は仮に0としてある）
subkey_list = np.array([w0, w1, w2, w3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])

#ここまで動作確認済み

# 以下、動作確認用の処理
print(subkey_list[3])    # subkey_list[n]の要素数は32
w_n = np.array_split(subkey_list[3], 4)
print(w_n)

# S-boxの定義（辞書による値の置き換えを考える）
sbox = {'00000000':'01100011', '00000001':'01111100', '00000010':'01110111', '00000011':'01111011', '00000100':'11110010', '00000101':'01101011',
        '00000110':'01101111', '00000111':'11000101', '00001000':'00110000', '00001001':'00000001', '00001010':'01100111', '00001011':'00101011',
        '00001100':'11111110', '00001101':'11010111', '00001110':'10101011', '00001111':'01110110', '00010000':'11001010', '00010001':'10000010',
        '00010010':'11001001', '00010011':'01111101', '00010100':'11111010', '00010101':'01011001', '00010110':'01000111', '00010111':'11110000',
        '00011000':'10101101', '00011001':'11010100', '00011010':'10100010', '00011011':'10101111', '00011100':'10011100', '00011101':'10100100',
        '00011110':'01110010', '00011111':'11000000', '00100000':'10110111', '00100001':'11111101', '00100010':'10010011', '00100011':'00100110',
        '00100100':'00110110', '00100101':'00111111', '00100110':'11110111', '00100111':'11001100', '00101000':'00110100', '00101001':'10100101',
        '00101010':'11100101', '00101011':'11110001', '00101100':'01110001', '00101101':'11011000', '00101110':'00110001', '00101111':'00010101',
        '00110000':'00000100', '00110001':'11000111', '00110010':'00100011', '00110011':'11000011', '00110100':'00011000', '00110101':'10010110',
        '00110110':'00000101', '00110111':'10011010', '00111000':'00000111', '00111001':'00010010', '00111010':'10000000', '00111011':'11100010',
        '00111100':'11101011', '00111101':'00100111', '00111110':'10110010', '00111111':'01110101', '01000000':'00001001', '01000001':'10000011',
        '01000010':'00101100', '01000011':'00011010', '01000100':'00011011', '01000101':'01101110', '01000110':'01011010', '01000111':'10100000',
        '01001000':'01010010', '01001001':'00111011', '01001010':'11010110', '01001011':'10110011', '01001100':'00101001', '01001101':'11100011',
        '01001110':'00101111', '01001111':'10000100', '01010000':'01010011', '01010001':'11010001', '01010010':'00000000', '01010011':'11101101',
        '01010100':'00100000', '01010101':'11111100', '01010110':'10110001', '01010111':'01011011', '01011000':'01101010', '01011001':'11001011',
        '01011010':'10111110', '01011011':'00111001', '01011100':'01001010', '01011101':'01001100', '01011110':'01011000', '01011111':'11001111',
        '01100000':'11010000', '01100001':'11101111', '01100010':'10101010', '01100011':'11111011', '01100100':'01000011', '01100101':'01001101',
        '01100110':'00110011', '01100111':'10000101', '01101000':'01000101', '01101001':'11111001', '01101010':'00000010', '01101011':'01111111',
        '01101100':'01010000', '01101101':'00111100', '01101110':'10011111', '01101111':'10101000', '01110000':'01010001', '01110001':'10100011',
        '01110010':'01000000', '01110011':'10001111', '01110100':'10010010', '01110101':'10011101', '01110110':'00111000', '01110111':'11110101',
        '01111000':'10111100', '01111001':'10110110', '01111010':'11011010', '01111011':'00100001', '01111100':'00010000', '01111101':'11111111',
        '01111110':'11110011', '01111111':'11010010', '10000000':'11001101', '10000001':'00001100', '10000010':'00010011', '10000011':'11101100',
        '10000100':'01011111', '10000101':'10010111', '10000110':'01000100', '10000111':'00010111', '10001000':'11000100', '10001001':'10100111',
        '10001010':'01111110', '10001011':'00111101', '10001100':'01100100', '10001101':'01011101', '10001110':'00011001', '10001111':'01110011',
        '10010000':'01100000', '10010001':'10000001', '10010010':'01001111', '10010011':'11011100', '10010100':'00100010', '10010101':'00101010',
        '10010110':'10010000', '10010111':'10001000', '10011000':'01000110', '10011001':'11101110', '10011010':'10111000', '10011011':'00010100',
        '10011100':'11011110', '10011101':'01011110', '10011110':'00001011', '10011111':'11011011', '10100000':'11100000', '10100001':'00110010',
        '10100010':'00111010', '10100011':'00001010', '10100100':'01001001', '10100101':'00000110', '10100110':'00100100', '10100111':'01011100',
        '10101000':'11000010', '10101001':'11010011', '10101010':'10101100', '10101011':'01100010', '10101100':'10010001', '10101101':'10010101',
        '10101110':'11100100', '10101111':'01111001', '10110000':'11100111', '10110001':'11001000', '10110010':'00110111', '10110011':'01101101',
        '10110100':'10001101', '10110101':'11010101', '10110110':'01001110', '10110111':'10101001', '10111000':'01101100', '10111001':'01010110',
        '10111010':'11110100', '10111011':'11101010', '10111100':'01100101', '10111101':'01111010', '10111110':'10101110', '10111111':'00001000',
        '11000000':'10111010', '11000001':'01111000', '11000010':'00100101', '11000011':'00101110', '11000100':'00011100', '11000101':'10100110',
        '11000110':'10110100', '11000111':'11000110', '11001000':'11101000', '11001001':'11011101', '11001010':'01110100', '11001011':'00011111',
        '11001100':'01001011', '11001101':'10111101', '11001110':'10001011', '11001111':'10001010', '11010000':'01110000', '11010001':'00111110',
        '11010010':'10110101', '11010011':'01100110', '11010100':'01001000', '11010101':'00000011', '11010110':'11110110', '11010111':'00001110',
        '11011000':'01100001', '11011001':'00110101', '11011010':'01010111', '11011011':'10111001', '11011100':'10000110', '11011101':'11000001',
        '11011110':'00011101', '11011111':'10011110', '11100000':'11100001', '11100001':'11111000', '11100010':'10011000', '11100011':'00010001',
        '11100100':'01101001', '11100101':'11011001', '11100110':'10001110', '11100111':'10010100', '11101000':'10011011', '11101001':'00011110',
        '11101010':'10000111', '11101011':'11101001', '11101100':'11001110', '11101101':'01010101', '11101110':'00101000', '11101111':'11011111',
        '11110000':'10001100', '11110001':'10100001', '11110010':'10001001', '11110011':'00001101', '11110100':'10111111', '11110101':'11100110',
        '11110110':'01000010', '11110111':'01101000', '11111000':'01000001', '11111001':'10011001', '11111010':'00101101', '11111011':'00001111',
        '11111100':'10110000', '11111101':'01010100', '11111110':'10111011', '11111111':'00010110'}

list_okikaego = []    # sboxによる置き換え後の値を格納するためのリスト
                      # 先頭の要素は、置き換え後の w_n_shift[0] に相当する

for i in range(1, 11):     # i=1スタート、i≦10まで
    n = 4 * i - 1
    list_a = np.array(['0', '0', '0', '0', '0', '0', '0', '0'])
    list_b = np.array(['0', '0', '0', '0', '0', '0', '0', '0'])
    list_c = np.array(['0', '0', '0', '0', '0', '0', '0', '0'])
    list_d = np.array(['0', '0', '0', '0', '0', '0', '0', '0'])
    for k_a in range(8):
        list_a[k_a] = subkey_list[n][k_a]              # ここの処理でエラー発生
    for k_b in range(8):                               # １つずつやっていく方法も検討すべき
        r_1 = k_b + 8                                  # 次はここから再開
        list_b[k_b] = subkey_list[n][r_1]
    for k_c in range(8):
        r_2 = k_c + 16
        list_c[k_c] = subkey_list[n][r_2]
    for k_d in range(8):
        r_3 = k_d + 24
        list_d[k_d] = subkey_list[n][r_3]
    list_abcd = np.array([list_a, list_b, list_c, list_d])
    w_n = list_abcd
    #w_n = np.array_split(subkey_list[n], 4)    # この処理を上のものに変更
    # RotWord（左巡回シフト）
    w_n_shift = np.roll(w_n, 8)   # 左巡回シフト後の w_n を w_n_shift と置く

    # subbytes処理
    for m in range(4):
        empty_list = []
        #for s in range(8):   # ここのforは不要な可能性あり  # 後で消す可能性あり
        empty_list.append(str(w_n_shift[m]))   # 動作確認するまで残す  元のコード : empty_list.append(str(w_n_shift[m][n]))
        #a = ''.join(empty_list)   # 候補1
        #a = ''.join([str(_) for _ in empty_list])   # 候補2
        a = ''.join(map(str,empty_list))   # 候補3
        print(a)
        print(type(a))    # aの正体がstr型であることが判明   aは、[01010101]
        a_0 = a[2]    # 以下で、aのうちの、数字（str型）のみ抽出
        a_1 = a[6]
        a_2 = a[10]
        a_3 = a[14]
        a_4 = a[18]
        a_5 = a[22]
        a_6 = a[26]
        a_7 = a[30]
        a_update = a_0 + a_1 + a_2 + a_3 + a_4 + a_5 + a_6 + a_7
        print(a_update)
        print(type(a_update))
        b = sbox[a_update]    #ここの中身を直前のfor文に対応させる
        print(b)
        # bをリストに格納する
        list_okikaego.append(b)
print(list_okikaego)
        # ここで、動作確認を行う必要あり（list_okikaegoをprintする）
#print(list_okikaego)
        # これ以降の、コメントアウトしたif文は正常に動作すれば後で削除
        #if (a == '00000000'):
            # 処理
        #elif (a == '00000001'):
            # 処理
